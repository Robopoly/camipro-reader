C51 COMPILER V9.05   I2C                                                                   11/05/2011 22:00:26 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN i2c.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe i2c.c DB OE

line level    source

   1          //////////////////////////////////////////////////////////////////////////////
   2          ///  _   _        _                            _                             
   3          /// | | | |      |_|                          | |                             
   4          /// | |_| |_____  _ _____           _     _ __| |                             
   5          /// |  _  | ___ || |  _  \  _____  \ \  / // _  |                             
   6          /// | | | | ____|| | |_| | (_____)  \ \/ /( (_| |                             
   7          /// |_| |_|_____)|_|___  |           \__/  \____|                             
   8          ///                  __| | Haute Ecole d'Ingénieurie                          
   9          ///                 |___/  et de Gestion du canton de Vaud                    
  10          ///                                                                           
  11          /// @title    Support du bus I2C pour microcontrolleur 8 bits Silabs          
  12          /// @context  Robotique 2007                                                  
  13          /// @author   Y. Chevallier <nowox@kalios.ch>
  14          ///               P. Gerber <patrick.gerber@heig-vd.ch>                                  
  15          /// @file     i2c.c                                                           
  16          /// @lang     ASCII/C51                                                       
  17          /// @svn      $Id: i2c.c 165 2007-03-28 12:39:08Z pgerber@heig-vd.ch $                  
  18          //////////////////////////////////////////////////////////////////////////////
  19          
  20          #ifndef __C300__ 
  21          #define __C300__ 
  22                  #include <C8051F310.h>
  23                  #include "types.h" 
  24          #endif
  25          
  26          
  27          //////////////////////////////////////////////////////////////////////////////
  28          /// Définition des constantes globales                                       
  29          //////////////////////////////////////////////////////////////////////////////
  30          #define I2C_WRITE 0x00           // WRITE direction bit
  31          #define I2C_READ  0x01           // READ direction bit
  32          sfr16 TMR2RL = 0xca;                  // Timer2 reload registers
  33          sfr16 TMR2   = 0xcc;                  // Timer2 counter registers
  34          
  35          //////////////////////////////////////////////////////////////////////////////
  36          /// Configuration du bus I2C                                                  
  37          //////////////////////////////////////////////////////////////////////////////
  38          #define SYSCLK               24500000   //!< System clock frequency         
  39          #define I2C_BROADCAST                    0x00   //!< Addresse du mode broadcast     
  40          #define I2C_ENABLE                  1   
  41          #define I2C_SLAVE_INHIBIT           1
  42          #define I2C_EXTHOLD                 0
  43          #define I2C_SCL_TIMEOUT_DETECTION   1
  44          #define I2C_FREE_TIMEOUT_DETECTION  1
  45          #define I2C_CLKSOURCE_SELECTION     I2C_TIMER1_OVERFLOW
  46          #define I2C_SCL_TIMEOUT_VALUE      25   //!< in [ms]                           
  47          #define I2C_KBPS               400000   //!< i2c bitrate in Kbits per second                 
  48          #define I2C_CALLBACK_ELEMENTS       4   //!< Maximum of callback event can be defined
  49          #define I2C_MAX_BUFFER_LENGTH       4   //!< Maximum size of i2c messages
  50          #define I2C_NUMBER_OF_TRY           3   //!< Number of trys for sending a message    
  51          #define I2C_ALL_ADDRESSES         255 
  52          
  53          //////////////////////////////////////////////////////////////////////////////
  54          /// Définission des différents états du bus I2C                               
  55          /// MT = Master Transmitter                                                   
C51 COMPILER V9.05   I2C                                                                   11/05/2011 22:00:26 PAGE 2   

  56          /// MR = Master Receiver                                                      
  57          /// ST = Slave Transmitter                                                    
  58          /// SR = Slave Receiver                                                       
  59          //////////////////////////////////////////////////////////////////////////////
  60          #define I2C_MTSTART 0xE0 //!< A master START was generated                   
  61          #define I2C_MTDB    0xC0 //!< A master Data or Address byte was transmitted  
  62          #define I2C_MRDB    0x80 //!< A master data byte was received; ACK requested 
  63          
  64          #define I2C_SRADD   0x20 //!< Slave Transmitter data byte transmitted        
  65          #define I2C_SRSTO   0x10 //!< Lost arbitration while attempting à STOP       
  66          #define I2C_SRDB    0x00 //!< A slave byte was received or Lost arbitration  
  67          #define I2C_STDB    0x40 //!< A STOP was detected while an addressed ST    
  68          #define I2C_STCP    0x41 //!< Transfer complete  
  69          #define I2C_STSTO   0x50 //!< A slave address was received   
  70          
  71          //////////////////////////////////////////////////////////////////////////////
  72          /// Variables globales                                                        
  73          //////////////////////////////////////////////////////////////////////////////
  74           
  75          //addresse de ce péripherique                          
  76          uint8 i2c_address;                                                      
  77          
  78          // Virtual eeprom 
  79          uint8 * ve_start;
  80          uint8 ve_size;  
  81          uint8 ve_offset;
  82          
  83          // Callback
  84          uint8 callback_mode; 
  85          void (*callback)(uint8 reg, uint8 *buffer);
  86          
  87          // Buffer
  88          uint8 databuf[8] = 0; 
  89          uint8 datalength = 0; 
  90          
  91          //////////////////////////////////////////////////////////////////////////////
  92          /// Initialisation du bus I2C/SMBUS                               
  93          //////////////////////////////////////////////////////////////////////////////
  94          void i2c_init(uint8 address,void * ptr, uint8 size)
  95          {
  96   1              //Configuration de la virtual eeprom            
  97   1              ve_start = ptr;                 //copie du pointeur sur le début de la zone mémoire
  98   1              ve_size = size;                 //copie la taille
  99   1              i2c_address = address<<1;       //copie l'adresse de ce périphérique
 100   1      
 101   1              //Initialisation du timer 2     
 102   1              TMR2CN = 0x00;
 103   1              CKCON &= ~0x20;
 104   1              TMR2RL = -(I2C_SCL_TIMEOUT_VALUE*SYSCLK/12/1000);
 105   1              TMR2 = TMR2RL;
 106   1              TR2 = 1;
 107   1      
 108   1              // Initialisation du SMBUS                                                   
 109   1              XBR1 |= 0x04;
 110   1              XBR2 |= 0x40;
*** ERROR C202 IN LINE 110 OF i2c.c: 'XBR2': undefined identifier
 111   1              SMB0CF = 0x81;
 112   1              EIP1    = 0x01;
 113   1              EIE1   |= 0x01; 
 114   1      }
 115          
 116          //////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.05   I2C                                                                   11/05/2011 22:00:26 PAGE 3   

 117          /// Mode Callback                                                 
 118          //////////////////////////////////////////////////////////////////////////////
 119          void i2c_set_callback_mode(void (*function)(uint8 reg, uint8 *buffer))
 120          {
 121   1              callback_mode = 1;
 122   1              callback = function;
 123   1      }
 124          
 125          //////////////////////////////////////////////////////////////////////////////
 126          /// Détection d'erreur, routine d'interruption                                
 127          //////////////////////////////////////////////////////////////////////////////
 128          void timer_scl_low_timeout_isr(void) interrupt 5
 129          {
 130   1        SMB0CF &= ~0x80;    //!< Stop i2c Stack
 131   1        SMB0CF |=  0x80;    //!< Restard i2c Stack
 132   1        TF2H = 0;           //!< clear interrupt flag
 133   1      }
 134          
 135          //////////////////////////////////////////////////////////////////////////////
 136          /// Routine d'interruption I2C.                                               
 137          /// Traitement des différents états                                           
 138          //////////////////////////////////////////////////////////////////////////////
 139          void i2c_isr(void) interrupt 6 // 7 for C8051F330
 140          { 
 141   1        boolean rxtx;
 142   1        static uint8 cpt;
 143   1      
 144   1      
 145   1        switch (SMB0CN & 0xF0) //!< Status code for the I2C interface
 146   1        {     
 147   2          /**
 148   2           * Slave Receiver: Start+Address received
 149   2           **/
 150   2          case I2C_SRADD:
 151   2      
 152   2            if(ACKRQ)
 153   2            {
 154   3              if(((SMB0DAT&0xFE) == i2c_address) || ((SMB0DAT&0xFE) == I2C_BROADCAST)) // Write
 155   3              {
 156   4                        STA = 0;  // Changé en sta 0 
 157   4                        cpt = 0;
 158   4                ACK = 1; 
 159   4                        if(SMB0DAT&0x01==I2C_READ) // Read
 160   4                        {
 161   5                              if(ve_offset <= ve_size)
 162   5                                      SMB0DAT = ve_start[ve_offset++];
 163   5                          if(!(SMB0DAT&0x80))
 164   5                              {
 165   6                                      STO = 1;
 166   6                                      SI = 0;
 167   6                                      //rxtx = 1;
 168   6                              } else SI = 0;
 169   5                              while(!TXMODE);
 170   5                              STO = 0;
 171   5                              
 172   5                        }
 173   4              }
 174   3              else 
 175   3              {
 176   4                ACK = 0; 
 177   4              }
 178   3            }
C51 COMPILER V9.05   I2C                                                                   11/05/2011 22:00:26 PAGE 4   

 179   2            else
 180   2            {
 181   3              STA = 0; 
 182   3            }
 183   2            break;
 184   2      
 185   2          /**
 186   2           * Slave Receiver: Data received
 187   2           **/
 188   2          case I2C_SRDB:
 189   2      
 190   2            if(ARBLOST) 
 191   2            {
 192   3              STO = 1; 
 193   3              ACK = 1; 
 194   3            }
 195   2            else
 196   2            {
 197   3                      cpt++;
 198   3                      if(cpt == 1)
 199   3                              ve_offset = SMB0DAT;
 200   3                      else
 201   3                      {
 202   4                              if(callback_mode == 1)
 203   4                                      databuf[cpt-2] = SMB0DAT;
 204   4                              else
 205   4                              {
 206   5                              if(ve_offset <= ve_size) 
 207   5                                              ve_start[ve_offset++] = SMB0DAT;
 208   5                              }
 209   4                      }
 210   3                      ACK = 1; 
 211   3            }
 212   2            break;
 213   2      
 214   2          /** 
 215   2           * Slave Receiver: Stop received
 216   2           **/
 217   2          case I2C_SRSTO:      
 218   2            ACK = 0; 
 219   2            STO = 0;                  //!< No action required (Transfer complete)
 220   2                if(callback_mode == 1)
 221   2                {
 222   3                      callback(ve_offset, &databuf);
 223   3                }
 224   2            break; 
 225   2      
 226   2          /**
 227   2           * Slave Transmitter: Data byte transmitted
 228   2           **/      
 229   2          case I2C_STDB:
 230   2            if(!ARBLOST)
 231   2            {
 232   3              if(ACK)
 233   3              { 
 234   4                if(ve_offset <= ve_size)
 235   4                              SMB0DAT = ve_start[ve_offset++]; 
 236   4              }
 237   3            }
 238   2            break; 
 239   2           
 240   2              /**
C51 COMPILER V9.05   I2C                                                                   11/05/2011 22:00:26 PAGE 5   

 241   2           * Slave Transmitter: Transfer Complete
 242   2           **/  
 243   2              case I2C_STCP:
 244   2                      break;
 245   2      
 246   2              /**
 247   2           * Master Transmitter/Receiver: START condition transmitted
 248   2           **/
 249   2          case I2C_MTSTART:
 250   2            break;
 251   2      
 252   2          /**
 253   2           * Master Transmitter: Data byte transmitted
 254   2           **/
 255   2          case I2C_MTDB:    
 256   2            break; 
 257   2      
 258   2          /**
 259   2           * Master Receiver: byte received
 260   2           **/    
 261   2          case I2C_MRDB: 
 262   2            break;
 263   2      
 264   2          /** 
 265   2           * Default: all other cases undefined
 266   2           **/
 267   2          default: 
 268   2            SMB0CF &= ~0x80;
 269   2            SMB0CF |=  0x80; 
 270   2        }
 271   1        SI=0;              //!< Clear interrupt flag
 272   1      
 273   1        if(rxtx)
 274   1        {
 275   2              while(!TXMODE)
 276   2              STO = 0;
 277   2              rxtx = 0;
 278   2        }
 279   1      }                    

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
